1.
Polecenie pgrep -u jpietrus sshd | wc -l zwróciło wynik 5, co znaczy że na moim koncie jest 5 procesów sshd.
Polecenie pgrep sshd | wc -l zwróciło wynik 145, co znaczy że na serwerze jest 145 takich procesów.

pgrep szuka procesów na podstawie nazwy lub atrybutów

Polecenie ps -u jpietrus | wc -l zwróciło wynik 17, infomując o 17 uruchomionych procesach na koncie użytkownika.

Polecenie ps -u root | wc -l zwróciło wynik 721, infomując o 721 uruchomionych procesach użytkownika root na serwerze.


2.Po otwarciu procesu A:
F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
5 S 15214 12084 11964  0  80   0 - 38199 -      ?        00:00:00 sshd
0 S 15214 12087 12084  0  80   0 -  3814 core_s pts/108  00:00:00 bash
5 S 15214 12451 12228  0  80   0 - 38199 -      ?        00:00:00 sshd
4 S 15214 12452     1  0  80   0 - 14457 SyS_ep ?        00:00:11 systemd
5 S 15214 12454 12452  0  80   0 - 75838 -      ?        00:00:00 (sd-pam)
0 S 15214 12465 12451  0  80   0 -  3814 -      pts/119  00:00:00 bash
5 S 15214 23066 22956  0  80   0 - 38199 -      ?        00:00:00 sshd
0 S 15214 23076 23066  0  80   0 -  3782 -      pts/113  00:00:00 bash
0 S 15214 23824 12465  0  80   0 -  3174 -      pts/119  00:00:00 procA.sh
0 S 15214 23825 23824  0  80   0 -  3174 -      pts/119  00:00:00 procB.sh
0 S 15214 23829 23825  0  80   0 -  3175 -      pts/119  00:00:00 procC.sh
0 S 15214 23830 23829  0  80   0 -  1839 -      pts/119  00:00:00 sleep
0 R 15214 24473 23076  0  80   0 -  8039 -      pts/113  00:00:00 ps
5 S 15214 40415 40268  0  80   0 - 38232 -      ?        00:00:00 sshd
0 S 15214 40428 40415  0  80   0 -  3782 -      pts/127  00:00:00 bash
0 S 15214 40796 40428  0  80   0 - 85846 core_s pts/127  00:00:03 emacs
0 S 15214 42759 40796  0  80   0 -  8907 -      ?        00:00:00 aspell
5 S 15214 59182 59102  0  80   0 - 38232 -      ?        00:00:00 sshd
0 S 15214 59184 59182  0  80   0 -  3814 core_s pts/94   00:00:00 bash
5 S 15214 61379 61295  0  80   0 - 38232 -      ?        00:00:00 sshd
0 S 15214 61384 61379  0  80   0 -  3814 core_s pts/24   00:00:00 bash
-----------------------------------------------------------------------
Po zabiciu środkowego procesu(procB):

F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
5 S 15214 12084 11964  0  80   0 - 38199 -      ?        00:00:00 sshd
0 S 15214 12087 12084  0  80   0 -  3814 core_s pts/108  00:00:00 bash
5 S 15214 12451 12228  0  80   0 - 38199 -      ?        00:00:00 sshd
4 S 15214 12452     1  0  80   0 - 14457 SyS_ep ?        00:00:11 systemd
5 S 15214 12454 12452  0  80   0 - 75838 -      ?        00:00:00 (sd-pam)
0 S 15214 12465 12451  0  80   0 -  3814 core_s pts/119  00:00:00 bash
5 S 15214 23066 22956  0  80   0 - 38199 -      ?        00:00:00 sshd
0 S 15214 23076 23066  0  80   0 -  3782 -      pts/113  00:00:00 bash
0 S 15214 23829     1  0  80   0 -  3175 -      pts/119  00:00:00 procC.sh
0 S 15214 23830 23829  0  80   0 -  1839 -      pts/119  00:00:00 sleep
0 R 15214 26531 23076  5  80   0 -  8039 -      pts/113  00:00:00 ps
5 S 15214 40415 40268  0  80   0 - 38232 -      ?        00:00:00 sshd
0 S 15214 40428 40415  0  80   0 -  3782 -      pts/127  00:00:00 bash
0 S 15214 40796 40428  0  80   0 - 85846 core_s pts/127  00:00:03 emacs
0 S 15214 42759 40796  0  80   0 -  8907 -      ?        00:00:00 aspell
5 S 15214 59182 59102  0  80   0 - 38232 -      ?        00:00:00 sshd
0 S 15214 59184 59182  0  80   0 -  3814 core_s pts/94   00:00:00 bash
5 S 15214 61379 61295  0  80   0 - 38232 -      ?        00:00:00 sshd
0 S 15214 61384 61379  0  80   0 -  3814 core_s pts/24   00:00:00 bash
---------------------------------------------------------------------------

Proces C został poprawnie odziedziczony przez proces init, ponieważ wartość PPID zmieniła się na 1.

3.

F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
5 S 15214 12451 12228  0  80   0 - 38199 -      ?        00:00:00 sshd
4 S 15214 12452     1  0  80   0 - 14457 SyS_ep ?        00:00:11 systemd
5 S 15214 12454 12452  0  80   0 - 75838 -      ?        00:00:00 (sd-pam)
0 S 15214 12465 12451  0  80   0 -  3814 -      pts/119  00:00:00 bash
5 S 15214 23066 22956  0  80   0 - 38199 -      ?        00:00:00 sshd
0 S 15214 23076 23066  0  80   0 -  3782 -      pts/113  00:00:00 bash
0 S 15214 38416 12465  0  80   0 -  3175 -      pts/119  00:00:00 tekst.sh
0 S 15214 38417 38416  0  80   0 -  3176 -      pts/119  00:00:00 petla.sh
0 S 15214 38418 38416  0  80   0 -  1874 -      pts/119  00:00:00 cat
0 S 15214 38419 38416  0  80   0 -  1874 -      pts/119  00:00:00 cat
0 S 15214 38641 38417  0  80   0 -  1839 -      pts/119  00:00:00 sleep
0 R 15214 38691 23076  0  80   0 -  8039 -      pts/113  00:00:00 ps
5 S 15214 40415 40268  0  80   0 - 38232 -      ?        00:00:00 sshd
0 S 15214 40428 40415  0  80   0 -  3782 -      pts/127  00:00:00 bash
0 S 15214 40796 40428  0  80   0 - 85846 core_s pts/127  00:00:05 emacs
0 S 15214 42759 40796  0  80   0 -  8907 -      ?        00:00:00 aspell
5 S 15214 59182 59102  0  80   0 - 38232 -      ?        00:00:00 sshd
0 S 15214 59184 59182  0  80   0 -  3814 core_s pts/94   00:00:00 bash
5 S 15214 61379 61295  0  80   0 - 38232 -      ?        00:00:00 sshd
0 S 15214 61384 61379  0  80   0 -  3814 core_s pts/24   00:00:00 bash

Procesy mają taki sam numer PPID jak skrypt przez który zostały wywołane, bądź mają PPID równe PID basha jeżeli zostały uruchomione z "palca". Procesy które są uruchomione tutaj w potoku to tekst.sh petla.sh oraz 2 razy cat.


5.
W początkowej wersji skryptu procesy były zabijane przez wszystkie sygnały.
Po dodaniu obsługi sygnałów, proces nie kończył się przy każdorazowym podaniu sygnału lecz pojawiały się komunikaty napisane w skrypcie za pomocą polecenia echo. Proces nie był jedynie odporny na sygnał KILL (-9), który nie może zostać zablokowany.

Po podaniu sygnału SIGHUP reakcja procesu na sygnały wróciła do reakcji domyślnej.

6. Po uruchomieniu przykładowego procesu otrzymujemy:

F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
0 S 15214  1536 56415  0  80   0 -  3176 -      pts/66   00:00:00 skrypt1.sh

Po użyciu SIGSTOP lub Ctrl+Z otrzymujemy:

F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
0 T 15214  1536 56415  0  80   0 -  3176 -      pts/66   00:00:00 skrypt1.sh

Sygnał SIGCONT daje taki sam efekt jak polecenie bg tzn. proces jest uruchamiany w tle.
W przypadku polecenia fg proces jest uruchamiany i wykonuje się w pierwszym tle.
Programu uruchomionego w drugim tle nie da się zatrzymać Crtl+Z, należy udać sygnału SIGCONT.


3.Polecenie ulimit pozwala na ograniczenie zasobow dla uzytkownika np ulimit -u -10 ogranicza ilosc uruchomionych procesów użytkownika do 10.
Po uruchomieniu fork skryptu ciężko zapanować nad sytuacją i uśmiercić namnażające się procesy. Pomocne w tej sytuacji okazać się może polecenie killall nazwa_polecenia.


4. Procesy domyślnie mają wartość nice równą 0.
Aby uruchomić proces z zadaną wartością priorytetu należy wydać polecenie: nice -n [PRIORYTET] nazwa_procesu.
Aby zmienić priorytet procesu uruchomionego w tle : renice PRIORYTET -p numer_PID
Czym niższa wartość nice tym program ma wyższy priorytet i zużywa więcej procesora.

Ten sam skrypt uruchomiony dwa razy bez zmieniania liczby nice. Zużycie procesora jest równe około 50% dla obu procesów.
Skrypty zostały uruchomione z poleceniem taskset -c 0 ./skrypt1.sh, aby przydzielić na to zadanie tylko jeden rdzeń.

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                  
40926 jpietrus  20   0   12704   3172   2964 R  49,5  0,0   0:07.26 skrypt1.sh               
41081 jpietrus  20   0   12704   3072   2860 R  49,5  0,0   0:04.53 skrypt1.sh

Po kolejnym odpaleniu skryptu1.sh na jednym rdzeniu, a następnie zmienieniu liczby nice, poleceniem renice na 10 zużycie procesora na jednym procesie wzrosło do około 90%, a na drugim procesie spadło do około 10%.

PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                  
51926 jpietrus  20   0   12704   3172   2964 R  89,8  0,0   1:11.48 skrypt1.sh
24068 jpietrus  20   0  152796   5652   3816 R  82,1  0,0   3:05.80 sshd
51716 jpietrus  30  10   12704   3072   2860 R   9,6  0,0   0:23.17 skrypt1.sh               
55488 jpietrus  20   0  152928   5652   3820 S   8,9  0,0   3:02.78 sshd                     
57160 jpietrus  20   0   40128   5064   3172 R   3,5  0,0   0:00.35 top                      
24077 jpietrus  20   0   15256   5476   3412 S   0,0  0,0   0:00.08 bash                     
28546 jpietrus  20   0  152796   5704   3868 S   0,0  0,0   0:00.15 sshd     